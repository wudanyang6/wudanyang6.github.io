<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>文件描述符 on 吴丹阳的站点</title>
    <link>https://wudanyang6.github.io/tags/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link>
    <description>Recent content in 文件描述符 on 吴丹阳的站点</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 13 Apr 2021 11:25:18 +0800</lastBuildDate><atom:link href="https://wudanyang6.github.io/tags/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件描述符</title>
      <link>https://wudanyang6.github.io/post/os/fd/</link>
      <pubDate>Tue, 13 Apr 2021 11:25:18 +0800</pubDate>
      
      <guid>https://wudanyang6.github.io/post/os/fd/</guid>
      <description>什么是文件描述符 对于内核而言，所有打开的文件都通过 文件描述符（file descriptor）引用。通常也写作 fd。
文件描述符是一个非负整数。
当打开一个现有文件或者创建一个新文件时，内核向进程返回一个 文件描述符。
文件描述符是跟 进程相关联的。
按照惯例，UNIX 系统将 fd 0 对应进程的标准输入， fd 1 对应进程的标准输出， fd 2 对应进程的标准错误。
系统调用中的文件描述符 UNIX 系统中，一切皆文件，所以一切资源都可以使用文件描述符进程引用。
以 open 系统调用为例
使用 man 2 open 查看系统 man 手册
NAME open, openat -- open or create a file for reading or writing SYNOPSIS #include &amp;lt;fcntl.h&amp;gt; int open(const char *path, int oflag, ...); int openat(int fd, const char *path, int oflag, ...); DESCRIPTION The file name specified by path is opened for reading and/or writing, as specified by the argument oflag; the file descriptor is returned to the calling process.</description>
    </item>
    
  </channel>
</rss>
