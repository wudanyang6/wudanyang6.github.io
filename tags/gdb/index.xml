<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>gdb on 吴丹阳的站点</title>
    <link>https://wudanyang6.github.io/tags/gdb/</link>
    <description>Recent content in gdb on 吴丹阳的站点</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 27 Mar 2022 22:28:47 +0800</lastBuildDate><atom:link href="https://wudanyang6.github.io/tags/gdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gdb 基本使用</title>
      <link>https://wudanyang6.github.io/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Mar 2022 22:28:47 +0800</pubDate>
      
      <guid>https://wudanyang6.github.io/post/c/gdb-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>1 什么是 gdb gdb 全称：&amp;quot;GNU symbolic debugger&amp;quot;
是一个 gnu 项目孵化出来的调试工具
最常用来调试 c、c++ 程序
2 基本使用 2.1 生成调试信息 在使用 gdb 之前，可执行程序需要生成调试信息
g++ test.c -g -o test -g 会在可执行文件中生成一个用于调试的符号表
2.2 启动 gdb 直接后面参数是可执行文件就可以启动调试
gdb test 如果要debug一个正在运行的程序，可以使用 -p 参数指定进程id
gdb -p $PID 效果如下图所示 2.3 调试程序 几个基本指令：
file：从文件导入调试信息符号表 start：从头开始并在首行进入断点执行 r(un)：执行 n(ext)：单步跳过 s(tep)：单步进入 fin(ish)：单步跳出 c(ontinue)：继续，执行到下一个断点 b(reak)：行号，在第几行打断点；function_name，在函数开始断点 p(rint)：打印变量值 ptype：打印变量类型 quit：退出当前调试 display：跟踪变量（相当于其他工具的监视 watch） bt：栈信息 frame：激活栈，默认显示当前栈帧 一般的工作流是：
gdb 【带有调试信息的可执行程序】 【列出当前执行位置后面的代码】
(gdb) l 795	/* NGX_TIMER_INFINITE == INFTIM */ 796 797	ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&amp;gt;log, 0, 798	&amp;#34;epoll timer: %M&amp;#34;, timer); 799 800	events = epoll_wait(ep, event_list, (int) nevents, timer); 801 802	err = (events == -1) ?</description>
    </item>
    
  </channel>
</rss>
