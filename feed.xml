<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://wudanyang6.github.io/">
    <title>dy_turbo</title>
    <link href="https://wudanyang6.github.io//feed.xml" rel="self" />
    <link href="https://wudanyang6.github.io/" />
    <updated>2024-01-31T02:53:04Z</updated>
    <id>https://wudanyang6.github.io/</id>
        <entry>
            <title>
                文件描述符
                
            </title>
            <updated>2024-01-29T06:34:40.990Z</updated>
            <id>https://wudanyang6.github.io//output/文件描述符/</id>
            <content type="html">
                &lt;h1 id=&quot;什么是文件描述符&quot; tabindex=&quot;-1&quot;&gt;什么是文件描述符&lt;/h1&gt;
&lt;p&gt;对于内核而言，所有打开的文件都通过&lt;code&gt;文件描述符（file descriptor）&lt;/code&gt;引用。通常也写作 &lt;code&gt;fd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;文件描述符&lt;/code&gt;是一个非负整数。&lt;/p&gt;
&lt;p&gt;当打开一个现有文件或者创建一个新文件时，内核向进程返回一个&lt;code&gt;文件描述符&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;文件描述符&lt;/code&gt;是跟&lt;code&gt;进程&lt;/code&gt;相关联的。&lt;/p&gt;
&lt;p&gt;按照惯例，&lt;code&gt;UNIX&lt;/code&gt; 系统将 &lt;code&gt;fd 0&lt;/code&gt; 对应进程的标准输入， &lt;code&gt;fd 1&lt;/code&gt; 对应进程的标准输出， &lt;code&gt;fd 2&lt;/code&gt; 对应进程的标准错误。&lt;/p&gt;
&lt;h1 id=&quot;系统调用中的文件描述符&quot; tabindex=&quot;-1&quot;&gt;系统调用中的文件描述符&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;UNIX&lt;/code&gt; 系统中，一切皆文件，所以一切资源都可以使用文件描述符进程引用。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;open&lt;/code&gt; 系统调用为例&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;man 2 open&lt;/code&gt; 查看系统 &lt;code&gt;man&lt;/code&gt; 手册&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-man&quot;&gt;NAME
     open, openat -- open or create a file for reading or writing

SYNOPSIS
     &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#include&quot;&gt;#include&lt;/a&gt; &amp;lt;fcntl.h&amp;gt;

     int
     open(const char *path, int oflag, ...);

     int
     openat(int fd, const char *path, int oflag, ...);

DESCRIPTION
     The file name specified by path is opened for reading and/or writing,
     as specified by the argument oflag; the file descriptor is returned to
     the calling process.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在简介中有一段话：&lt;code&gt;the file descriptor is returned to the calling process.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;c&lt;/code&gt; 语言打开一个 文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#include&quot;&gt;#include&lt;/a&gt; &amp;lt;stdio.h&amp;gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#include&quot;&gt;#include&lt;/a&gt; &amp;lt;fcntl.h&amp;gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#include&quot;&gt;#include&lt;/a&gt; &amp;lt;unistd.h&amp;gt;

int main() {
	int fd;
	fd = open(&amp;quot;tmp.txt&amp;quot;, O_RDONLY);
	printf(&amp;quot;%d&amp;quot;, fd);
	sleep(10);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会发现，在进程运行时 &lt;code&gt;fd&lt;/code&gt; 目录下，会出现一个描述符 3 指向了 打开的文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ ll /proc/$(ps aux | grep a.out | grep -v grep | awk &#39;{print $2}&#39;)/fd
total 0
lrwx------ 1 ubuntu ubuntu 64 Apr 13 13:48 0 -&amp;gt; /dev/pts/4
lrwx------ 1 ubuntu ubuntu 64 Apr 13 13:48 1 -&amp;gt; /dev/pts/4
lrwx------ 1 ubuntu ubuntu 64 Apr 13 13:48 2 -&amp;gt; /dev/pts/4
lr-x------ 1 ubuntu ubuntu 64 Apr 13 13:48 3 -&amp;gt; /home/ubuntu/mydisk/yangblog/codes/file/tmp.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以把这个文件描述符当做参数传递给 &lt;code&gt;read&lt;/code&gt; 或者 &lt;code&gt;write&lt;/code&gt; 等等系统调用。&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//output/文件描述符/" />
        </entry>
        <entry>
            <title>
                如何追查线上问题
                
            </title>
            <updated>2024-01-29T08:15:31.921Z</updated>
            <id>https://wudanyang6.github.io//output/如何追查线上问题/</id>
            <content type="html">
                &lt;p&gt;tags: &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#开发经验&quot;&gt;#开发经验&lt;/a&gt; &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#output&quot;&gt;#output&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;原则&quot; tabindex=&quot;-1&quot;&gt;原则&lt;/h1&gt;
&lt;h2 id=&quot;止损优先&quot; tabindex=&quot;-1&quot;&gt;止损优先&lt;/h2&gt;
&lt;p&gt;不能先追查问题根源， 首先应该&lt;code&gt;止损&lt;/code&gt;，不让问题进一步扩大，&lt;code&gt;代码回滚&lt;/code&gt;、&lt;code&gt;服务降级&lt;/code&gt;等都可以起到止损的效果。&lt;br /&gt;
对于止损有一个比较好的实践，新业务或者重构业务上线时，可以加一个 &lt;code&gt;配置开关 &lt;/code&gt;控制是否启用逻辑，在发现有损时，可以及时关掉业务逻辑，比重新上线要快特别多&lt;/p&gt;
&lt;h2 id=&quot;及时通告&quot; tabindex=&quot;-1&quot;&gt;及时通告&lt;/h2&gt;
&lt;p&gt;在问题发生之后，要及时对处理问题的过程进行&lt;code&gt;通告&lt;/code&gt;。特别是应对线上有损的问题时，更应该及时通告。在内部群中，简单描述一下问题与可能的原因，处理的进度。而在外部群里，可以只说一下处理的进度。如果有必要，可以将问题上诉到领导，如果还解决不了问题，可以逐级继续上诉。&lt;/p&gt;
&lt;h1 id=&quot;追查问题的方法&quot; tabindex=&quot;-1&quot;&gt;追查问题的方法&lt;/h1&gt;
&lt;h2 id=&quot;逻辑方法:&quot; tabindex=&quot;-1&quot;&gt;逻辑方法:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先收集&lt;code&gt;现象&lt;/code&gt;：业务报错、线上报错日志等&lt;br /&gt;
对紧急的问题来说，需要对线上业务、服务器等非常熟悉，才能迅速收集到有用的报错信息。&lt;/li&gt;
&lt;li&gt;针对现象假设&lt;code&gt;原因&lt;/code&gt;：
&lt;ol&gt;
&lt;li&gt;常见问题依据追查手册&lt;/li&gt;
&lt;li&gt;其他问题保持思路开放，大胆假设&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;是否&lt;code&gt;有损&lt;/code&gt;的判断：&lt;br /&gt;
根据现象假设出可能的原因，判断是否是有损的，如果是有损的问题，参考 &lt;strong&gt;止损优先&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;质疑&lt;/code&gt;所有数据：&lt;br /&gt;
各个数据、监控系统等的有效性也需要质疑，不能完全相信，需要小心求证&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;知识准备&quot; tabindex=&quot;-1&quot;&gt;知识准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对线上各种&lt;code&gt;日志&lt;/code&gt;的熟悉，从日志中能看到具体的问题，比如 nginx 日志 php 日志等&lt;/li&gt;
&lt;li&gt;对线上的各种&lt;code&gt;配置&lt;/code&gt;更要做到心中有数&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;细节&lt;/code&gt;的追查，每次都更细一些，这样才能获得更多的信息&lt;/li&gt;
&lt;li&gt;计算机&lt;code&gt;基本功&lt;/code&gt;，有时问题追查不下去，不是没有线索，而是追查到了一个未知的领域，没有相关的知识，无法追查&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;总结经验&quot; tabindex=&quot;-1&quot;&gt;总结经验&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;成熟的方法落地成&lt;code&gt;工具&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对问题的追查形成&lt;code&gt;文档&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;问题解决之后&quot; tabindex=&quot;-1&quot;&gt;问题解决之后&lt;/h1&gt;
&lt;p&gt;如果问题解决之后，我们就不再跟进了，那么我们就沦为了解决问题的工具，问题也随之越来越多，解决不完。&lt;br /&gt;
那么，我们可以通过思考以下几点来提升自己&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线上是否恢复了正常？（&lt;code&gt;最基本的&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;问题的原因是什么？（&lt;code&gt;落到追查文档&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;通过什么手段恢复的？（&lt;code&gt;解决方案&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;怎么可以避免下次再次出现问题？（&lt;code&gt;防患未然&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;除了此次出现的问题，会不会有其他的问题出现（&lt;code&gt;举一反三&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;出现此类问题是否是架构问题造成的？（&lt;code&gt;根本原因&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;

            </content>
            <link href="https://wudanyang6.github.io//output/如何追查线上问题/" />
        </entry>
        <entry>
            <title>
                obsidian-things3-today插件
                
            </title>
            <updated>2024-01-29T06:27:31.704Z</updated>
            <id>https://wudanyang6.github.io//obsidian/obsidian-things3-today插件/</id>
            <content type="html">
                &lt;h1 id=&quot;obsidian-things3-today&quot; tabindex=&quot;-1&quot;&gt;obsidian-things3-today插件&lt;/h1&gt;
&lt;p&gt;把之前的插件重新搞了搞，把乱七八糟的东西去掉了，然后提交了obsidian插件库&lt;/p&gt;
&lt;p&gt;正在等着被review： &lt;a href=&quot;https://github.com/obsidianmd/obsidian-releases/pull/2997&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/obsidianmd/obsidian-releases/pull/2997&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新录了一个gif：&lt;/p&gt;
&lt;p&gt;图中可以看到和things3的Today列表联动还算是顺畅&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/things3-today-showcase.gif&quot; alt=&quot;things3-today-showcase.gif&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference&lt;/h2&gt;

            </content>
            <link href="https://wudanyang6.github.io//obsidian/obsidian-things3-today插件/" />
        </entry>
        <entry>
            <title>
                原神挺好玩
                
            </title>
            <updated>2024-01-31T02:52:35.050Z</updated>
            <id>https://wudanyang6.github.io//card/原神挺好玩/</id>
            <content type="html">
                &lt;h1 id=&quot;原神挺好玩&quot; tabindex=&quot;-1&quot;&gt;原神挺好玩&lt;/h1&gt;
&lt;p&gt;最近游戏一直在玩原神，一个开放的大世界。主线剧情刚刚做完，确实是我想象中的角色扮演（RPG）游戏。&lt;/p&gt;
&lt;p&gt;记得高中在塞班手机上玩的一款RPG游戏，一个周末都在刷怪。后来重新练了个号，结果跟大师傅打架的时候，他的70级宠物不知道为什么变成我的了。我就带着一个70级将近满级的宠物一路过关斩将玩通关了。&lt;/p&gt;
&lt;p&gt;原神里面我自己感觉可玩的点有几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;角色都很二次元，都是按照动漫里面的角色画出来的，二次元的估计会很喜欢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;剧情比较代入，某些剧情需要努力打怪，不过主线剧情并不是很难。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大世界地图非常大，如果不是有传送节点估计跑图都得跑断腿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大世界里面有很多宝箱，有些宝箱需要解密之后才能获得，不过这些宝箱都是一次性的，我在蒙德、璃月、稻妻的探索度最高才到 50% ，所以也可见大世界有多大东西有多丰富。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支线剧情也很丰富多彩，比如我就特别喜欢璃月里面的一个支线剧情《神女劈观》，并且剧情最后有一首歌，大家可以先听一下。不过没有了解剧情之前听这首歌触动应该不是很大，还是具体体验一下剧情再说。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后一点，原神不花钱氪金也可以玩的很舒服，每天做做每日任务，开开宝箱，欣赏欣赏美景，然后读一读角色的背景故事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对了，游戏社区里的前辈忠告，当深渊不存在，能打到哪里就打到哪里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/clop_2024-01-31_36.png&quot; alt=&quot;../attachs/clop_2024-01-31_36.png&quot; /&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//card/原神挺好玩/" />
        </entry>
        <entry>
            <title>
                GTD
                
            </title>
            <updated>2024-01-29T15:36:47.054Z</updated>
            <id>https://wudanyang6.github.io//card/GTD/</id>
            <content type="html">
                &lt;ol&gt;
&lt;li&gt;把事情做好&lt;/li&gt;
&lt;li&gt;执行时是拿结果engage（而不是仅仅去 exec）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://topbook.cc/course/detail/153&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://topbook.cc/course/detail/153&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;捕获&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/Pasted%20image%2020220509232211.png&quot; alt=&quot;Pasted image 20220509232211.png&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1wE411176Q?p=6&amp;amp;spm_id_from=333.880.my_history.page.click&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;bilibili教程&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//card/GTD/" />
        </entry>
        <entry>
            <title>
                About Me
                
            </title>
            <updated>2024-01-30T05:29:12.761Z</updated>
            <id>https://wudanyang6.github.io//card/About Me/</id>
            <content type="html">
                &lt;h1 id=&quot;about-me&quot; tabindex=&quot;-1&quot;&gt;About Me&lt;/h1&gt;
&lt;p&gt;千里之行，始于足下&lt;/p&gt;
&lt;h2 id=&quot;leetcode&quot; tabindex=&quot;-1&quot;&gt;leetcode&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/u/wudanyang/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;leetcode 个人主页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;github&quot; tabindex=&quot;-1&quot;&gt;github&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wudanyang6&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github 个人主页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;music&quot; tabindex=&quot;-1&quot;&gt;music&lt;/h2&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;650px&quot; src=&quot;https://music.163.com/playlist?id=13022777&amp;userid=16553655&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;false&quot;&gt; &lt;/iframe&gt;

            </content>
            <link href="https://wudanyang6.github.io//card/About Me/" />
        </entry>
        <entry>
            <title>
                Home dy_turbo
                
            </title>
            <updated>2024-01-30T05:29:23.047Z</updated>
            <id>https://wudanyang6.github.io//</id>
            <content type="html">
                &lt;h1 id=&quot;home-dy-turbo&quot; tabindex=&quot;-1&quot;&gt;Home dy_turbo&lt;/h1&gt;
&lt;h2 id=&quot;about-me&quot; tabindex=&quot;-1&quot;&gt;About Me&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/card/About%20Me/&quot;&gt;About Me&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;list&quot; tabindex=&quot;-1&quot;&gt;List&lt;/h2&gt;
&lt;table class=&quot;block-language-dataview&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Created&lt;/th&gt;
&lt;th&gt;Modified&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/card/About%20Me/&quot;&gt;About Me&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2024-01-30星期2 13:27&lt;/td&gt;
&lt;td&gt;2024-01-30星期2 13:29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/obsidian/obsidian-things3-today%E6%8F%92%E4%BB%B6/&quot;&gt;obsidian-things3-today插件&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 14:23&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 14:27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/c/nginx/epoll%E7%9A%84%E8%BE%B9%E7%BC%98%E8%A7%A6%E5%8F%91%E5%92%8C%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91/&quot;&gt;epoll的边缘触发和水平触发&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2024-01-28星期7 22:53&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 11:21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/&quot;&gt;Home dy_turbo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2024-01-28星期7 22:46&lt;/td&gt;
&lt;td&gt;2024-01-30星期2 13:29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/300%20Code/300%20Leetcode/%E5%85%B7%E4%BD%93%E9%A2%98%E7%9B%AE/leetcode-1137%E7%AC%AC%20N%20%E4%B8%AA%E6%B3%B0%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/&quot;&gt;leetcode-1137第 N 个泰波那契数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2023-02-26星期7 18:03&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 23:22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/card/GTD/&quot;&gt;GTD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2022-05-5星期4 13:26&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 23:36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/%E8%B8%A9%E5%9D%91/js%E8%B6%85%E9%95%BF%E6%95%B0%E5%AD%97%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/&quot;&gt;js超长数字溢出问题&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2022-02-26星期6 21:06&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 16:16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/linux/%E6%A0%91%E8%8E%93%E6%B4%BE/ubuntu%20%E6%A0%91%E8%8E%93%E6%B4%BE%E5%90%AF%E5%8A%A8%E6%97%B6%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/&quot;&gt;ubuntu 树莓派启动时配置网络&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-27星期2 23:13&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 14:37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/c/nginx/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%20nginx%20%E7%9A%84rewrite%E8%AE%B0%E5%BD%95/&quot;&gt;如何查看 nginx 的rewrite记录&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-22星期4 18:14&lt;/td&gt;
&lt;td&gt;2024-01-28星期7 23:38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/c/nginx/nginx%20%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/&quot;&gt;nginx 进程模型-整体架构&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-14星期3 13:14&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 14:36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/output/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/&quot;&gt;文件描述符&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-13星期2 11:24&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 14:34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/output/%E5%A6%82%E4%BD%95%E8%BF%BD%E6%9F%A5%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/&quot;&gt;如何追查线上问题&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-12星期1 11:53&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 16:15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/linux/linux-man%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/&quot;&gt;linux-man命令使用&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-04-7星期3 17:11&lt;/td&gt;
&lt;td&gt;2024-01-29星期1 16:17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/c/nginx/vscode%20%E8%B0%83%E8%AF%95nginx%E4%BB%A3%E7%A0%81/&quot;&gt;vscode 调试nginx代码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2021-03-25星期4 19:13&lt;/td&gt;
&lt;td&gt;2024-01-28星期7 23:57&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

            </content>
            <link href="https://wudanyang6.github.io//" />
        </entry>
        <entry>
            <title>
                leetcode-1137第 N 个泰波那契数
                
            </title>
            <updated>2024-01-29T15:22:37.082Z</updated>
            <id>https://wudanyang6.github.io//300 Code/300 Leetcode/具体题目/leetcode-1137第 N 个泰波那契数/</id>
            <content type="html">
                &lt;h1 id=&quot;题目&quot; tabindex=&quot;-1&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/n-th-tribonacci-number/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1137. 第 N 个泰波那契数&lt;/a&gt;&lt;br /&gt;
这个跟斐波那契好像是一样的，一模一样&lt;/p&gt;
&lt;h1 id=&quot;解法&quot; tabindex=&quot;-1&quot;&gt;解法&lt;/h1&gt;
&lt;p&gt;跟斐波纳契数列一样的解法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class Solution {

    /**
     * @param Integer $n
     * @return Integer
     */
    function tribonacci($n) {
        if ($n &amp;lt;= 0) {
            return 0;
        }
        
        $retArr = [0,1,1];
        for ($i = 3; $i &amp;lt;= $n; $i++) {
            $retArr[$i] = $retArr[$i-1] + $retArr[$i-2] + $retArr[$i-3];
        }

        return $retArr[$n];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;

            </content>
            <link href="https://wudanyang6.github.io//300 Code/300 Leetcode/具体题目/leetcode-1137第 N 个泰波那契数/" />
        </entry>
        <entry>
            <title>
                js超长数字溢出问题
                
            </title>
            <updated>2024-01-29T08:16:00.186Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/踩坑/js超长数字溢出问题/</id>
            <content type="html">
                &lt;p&gt;tags: &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#js&quot;&gt;#js&lt;/a&gt; &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#联调&quot;&gt;#联调&lt;/a&gt; &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#踩坑&quot;&gt;#踩坑&lt;/a&gt;  &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#output&quot;&gt;#output&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wudanyang/p/15940613.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.cnblogs.com/wudanyang/p/15940613.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;现象&quot; tabindex=&quot;-1&quot;&gt;现象&lt;/h1&gt;
&lt;p&gt;之前遇到过的一个问题&lt;br /&gt;
接口要返回给前端（js）一个比较长的数字：&lt;code&gt;759830849237899244&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看了接口返回是没问题的，但是前端拿着数字去取详情的时候，传过来的是另外一个数字：&lt;code&gt;759830849237899300&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一比较，看起来是数字被转换了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;759830849237899244&lt;/code&gt; =&amp;gt; &lt;code&gt;759830849237899300&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在前端控制台执行一下：&lt;br /&gt;
&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/Pasted%20image%2020220226212150.png&quot; alt=&quot;Pasted image 20220226212150.png&quot; /&gt;&lt;br /&gt;
果然被转成了另外一个数字，而且看规律很像是后三位被上取整了&lt;/p&gt;
&lt;h1 id=&quot;原理&quot; tabindex=&quot;-1&quot;&gt;原理&lt;/h1&gt;
&lt;p&gt;后来了解到js会将数字按照下图方式切分后表示数字，以至于最高表示的数字只能到 &lt;code&gt;9007199254740991&lt;/code&gt;  比这个数字更大的数字就会发生进位溢出&lt;br /&gt;
&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/Pasted%20image%2020201109201831.png&quot; alt=&quot;Pasted image 20201109201831.png&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot; tabindex=&quot;-1&quot;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;解决方案很好办，那就是将数字转成字符串，只要前端不强转成数字，那就不会出问题&lt;br /&gt;
&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/iShot2022-02-26%2021.46.09.jpg&quot; alt=&quot;iShot2022-02-26 21.46.09.jpg&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考文档&quot; tabindex=&quot;-1&quot;&gt;参考文档&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1477816&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JSON Bigint 大数精度丢失的背后&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10631494/json-parse-parses-converts-big-numbers-incorrectly&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JSON.parse parses / converts big numbers incorrectly&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/踩坑/js超长数字溢出问题/" />
        </entry>
        <entry>
            <title>
                ubuntu 树莓派启动时配置网络
                
            </title>
            <updated>2024-01-29T06:37:29.740Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/linux/树莓派/ubuntu 树莓派启动时配置网络/</id>
            <content type="html">
                &lt;h1 id=&quot;code-ubuntu-code&quot; tabindex=&quot;-1&quot;&gt;树莓派 &lt;code&gt;ubuntu&lt;/code&gt; 配置网络&lt;/h1&gt;
&lt;p&gt;树莓派现在可以安装很多操作系统，其中 &lt;code&gt;ubuntu&lt;/code&gt; 也提供了树莓派版本，因为对 &lt;code&gt;ubuntu&lt;/code&gt; 更加熟悉，所以就往 &lt;code&gt;SD&lt;/code&gt; 卡中烧录了 &lt;code&gt;ubuntu&lt;/code&gt; 的 &lt;code&gt;20.04 lts 64位&lt;/code&gt; 版本。&lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;这里有可供选择的操作系统。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单提一嘴烧录操作系统到 &lt;code&gt;SD&lt;/code&gt; 卡上面的方法，树莓派提供了一个&lt;a href=&quot;https://www.raspberrypi.org/software/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;傻瓜式的软件&lt;/a&gt;给大家使用，直接打开之后选择系统，就可以烧录了，烧录过程大概会有几分钟。&lt;/p&gt;
&lt;p&gt;烧录完成之后，如果你按照树莓派官网的教程进行操作，肯定都行不通，因为树莓派的官方操作系统 &lt;code&gt;Raspberry Pi OS&lt;/code&gt; 和 &lt;code&gt;Ubuntu For Raspberry&lt;/code&gt; 上面的网络配置方式完全不一样。&lt;/p&gt;
&lt;h2 id=&quot;ubuntu&quot; tabindex=&quot;-1&quot;&gt;安装了 ubuntu 的树莓派怎么配置网络？&lt;/h2&gt;
&lt;p&gt;打开你烧录好的 &lt;code&gt;SD&lt;/code&gt; 卡&lt;/p&gt;
&lt;p&gt;找到 &lt;code&gt;network-config&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;写入如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;wifis:
  wlan0:
  dhcp4: true
  optional: true
  access-points:
    &amp;lt;wifi network name&amp;gt;:
      password: &amp;quot;&amp;lt;wifi password&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是企业网络：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;wifis:
  wlan0:
  dhcp4: true
  optional: true
  access-points:
        &amp;lt;wifi network name&amp;gt;:
          auth:
            key-management: eap
            method: peap
            identity: &amp;quot;wudanyang&amp;quot;
            password: &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://netplan.io/examples/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;配置文件的格式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改完之后，把 &lt;code&gt;SD&lt;/code&gt; 卡从电脑上弹出，然后插到树莓派里。&lt;/p&gt;
&lt;p&gt;不过，&lt;strong&gt;重启之后，你可能还是无法连接到网络&lt;/strong&gt;。可以看下&lt;a href=&quot;https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: During the first boot, your Raspberry Pi will try to connect to this network. It will fail the first time around. Simply reboot &lt;code&gt;sudo reboot&lt;/code&gt; and it will work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用&lt;code&gt;ubuntu&lt;/code&gt;官网的一段话，第一次会失败，直接重启，&lt;strong&gt;第二次就能连上了&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;开启网络之后，如何登录树莓派？&quot; tabindex=&quot;-1&quot;&gt;开启网络之后，如何登录树莓派？&lt;/h2&gt;
&lt;p&gt;安装好之后默认用户名和密码都是 &lt;code&gt;ubuntu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh ubuntu@&amp;lt;raspberry ip&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ip 地址的获取这里列举几种方法，不详细介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自己的路由器&lt;/strong&gt;：登录后台查看分配的 ip&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局域网扫描&lt;/strong&gt;（局域网机器不多的情况下）：
&lt;ol&gt;
&lt;li&gt;下载个局域网扫描工具，如果局域网机器不多，会看到一个制造商为树莓派的 ip&lt;/li&gt;
&lt;li&gt;使用命令行 &lt;code&gt;arp -a &lt;/code&gt; 挨个试一下&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ubuntu&lt;/code&gt; 启动之后会使用 &lt;code&gt;avahi&lt;/code&gt; 服务通过 &lt;a href=&quot;https://baike.baidu.com/item/mdns&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;mdns&lt;/a&gt; 协议在局域网注册一个域名 &lt;code&gt;ubuntu.local&lt;/code&gt;，所以你可以这样登录 &lt;code&gt;ssh ubuntu@ubuntu.local&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;树莓派支持的操作系统&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/software/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;树莓派操作系统烧录软件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;无屏幕和键盘配置树莓派WiFi和SSH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/mdns&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;百度百科-mdns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lonerpaul/p/11054419.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mac通过网线直连控制树莓派 - lonerpaul - 博客园&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/linux/树莓派/ubuntu 树莓派启动时配置网络/" />
        </entry>
        <entry>
            <title>
                linux-man命令使用
                
            </title>
            <updated>2024-01-29T08:17:40.695Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/linux/linux-man命令使用/</id>
            <content type="html">
                &lt;h1 id=&quot;内容&quot; tabindex=&quot;-1&quot;&gt;内容&lt;/h1&gt;
&lt;p&gt;1 - commands（普通的命令）&lt;br /&gt;
2 - system calls（系统调用）&lt;/p&gt;
&lt;p&gt;3 - library calls（库函数）&lt;br /&gt;
4 - special files（特殊文件：/dev下设备文件）&lt;br /&gt;
5 - file formats and convertions（文件格式）&lt;/p&gt;
&lt;p&gt;6 - games for linux（游戏和娱乐）&lt;br /&gt;
7 - macro packages and conventions（杂项）&lt;br /&gt;
8 - system management commands（管理员命令）&lt;br /&gt;
9 - 其他（Linux特定， 用来存放内核例行程序的文档）&lt;/p&gt;
&lt;p&gt;可使用 man man 进入此页面&lt;/p&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhang_chou_chou/article/details/83589224&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://blog.csdn.net/zhang_chou_chou/article/details/83589224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;在线 man 手册&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/linux/linux-man命令使用/" />
        </entry>
        <entry>
            <title>
                如何查看 nginx 的rewrite记录
                
            </title>
            <updated>2024-01-28T15:38:01.001Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/c/nginx/如何查看 nginx 的rewrite记录/</id>
            <content type="html">
                &lt;h1 id=&quot;nginx-rewrite&quot; tabindex=&quot;-1&quot;&gt;如何调试nginx的rewrite规则？&lt;/h1&gt;
&lt;p&gt;设置 &lt;code&gt;rewrite_log on;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并且将&lt;code&gt;error_log&lt;/code&gt; 的报错等级改成 &lt;code&gt;notice&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;官网对 &lt;code&gt;rewrite_log&lt;/code&gt; 的解释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;Syntax:	rewrite_log on | off;
Default:	
rewrite_log off;
Context:	http, server, location, if
Enables or disables logging of ngx_http_rewrite_module module directives processing results into the error_log at the notice level.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，这个指令只能在 &lt;code&gt;http&lt;/code&gt; &lt;code&gt;server&lt;/code&gt; &lt;code&gt;location&lt;/code&gt; &lt;code&gt;if&lt;/code&gt; 配置指令中使用，日志等级是 &lt;code&gt;notice&lt;/code&gt; 写入到 &lt;code&gt;error_log&lt;/code&gt; 配置的文件中。&lt;/p&gt;
&lt;h1 id=&quot;示例&quot; tabindex=&quot;-1&quot;&gt;示例&lt;/h1&gt;
&lt;p&gt;url： &lt;code&gt;/q?someparams&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;2021/04/22 18:21:28 [notice] 18131#0: *102982 &amp;quot;^/+m/question(.*)?qid=&#92;d+(.*)?$&amp;quot; does not match ...
... 中间省略一些日志
2021/04/22 18:21:28 [notice] 18131#0: *102982 &amp;quot;^/+question/(&#92;w+.*?)$&amp;quot; does not match ...
2021/04/22 18:21:28 [notice] 18131#0: *102982 &amp;quot;^/+q&#92;?(.*)?tn=nsatom_qb_main(.*)?$&amp;quot; matches ...
2021/04/22 18:21:28 [notice] 18131#0: *102982 &amp;quot;^/+q&amp;quot; matches ...
2021/04/22 18:21:28 [notice] 18131#0: *102982 rewritten data: &amp;quot;/q/q/q/q/q&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面的日志中可以看出，当触发了重写规则时，会有关键字 &lt;code&gt;matches&lt;/code&gt; 否则会有 &lt;code&gt;does not match&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;最终重写完成之后，访问的地址会有标记：&lt;code&gt;rewritten data&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里就是 &lt;code&gt;/q/q/q/q/q&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://serverfault.com/questions/333048/best-way-to-debug-nginx-rewrite-rules-in-config-file&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;best way to debug nginx rewrite rules in config file?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;nginx官方文档：Module ngx_http_rewrite_module&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/c/nginx/如何查看 nginx 的rewrite记录/" />
        </entry>
        <entry>
            <title>
                vscode 调试nginx代码
                
            </title>
            <updated>2024-01-28T15:57:19.418Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/c/nginx/vscode 调试nginx代码/</id>
            <content type="html">
                &lt;p&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#output&quot;&gt;#output&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;内容&quot; tabindex=&quot;-1&quot;&gt;内容&lt;/h1&gt;
&lt;h2 id=&quot;auto-cc-conf&quot; tabindex=&quot;-1&quot;&gt;修改 auto/cc/conf&lt;/h2&gt;
&lt;p&gt;ngx_compile_opt 中添加 -g&lt;br /&gt;
修改后如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ngx_compile_opt=&amp;quot;-c -g&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://wudanyang6.github.io/100%20Programmer/c/nginx/vscode%20%E8%B0%83%E8%AF%95nginx%E4%BB%A3%E7%A0%81/#gcc-g&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#gcc&quot;&gt;#gcc&lt;/a&gt; -g 的作用&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;and-amp-and-amp&quot; tabindex=&quot;-1&quot;&gt;编译 &amp;amp; 安装 &amp;amp; 运行&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# prefix 是想要安装到的目录
auto/configure --prefix=/home/ubuntu/mydisk/var/nginx-debug-1

# 编译安装
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;修改配置&quot; tabindex=&quot;-1&quot;&gt;修改配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vim /home/ubuntu/mydisk/var/nginx-debug-1/conf/nginx.conf&lt;/code&gt;&lt;br /&gt;
将监听端口号改成 &lt;code&gt;8080&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;worker_processes&lt;/code&gt; 改成 1 (方便调试)&lt;/p&gt;
&lt;h3 id=&quot;nginx&quot; tabindex=&quot;-1&quot;&gt;启动 nginx&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/home/ubuntu/mydisk/var/nginx-debug-1/sbin/nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;nginx 的进程：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;ps aux | grep nginx
ubuntu     17093  0.0  0.0   4184   372 ?        Ss   Mar30   0:00 nginx: master process /home/ubuntu/mydisk/var/nginx-debug-1/sbin/nginx
ubuntu     17094  0.0  0.0   4620  2316 ?        S    Mar30   0:00 nginx: worker process
ubuntu     46072  0.0  0.0   7692   648 pts/0    S+   11:21   0:00 grep --color=auto nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vscode&quot; tabindex=&quot;-1&quot;&gt;配置 vscode 调试&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;debug master&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;/home/ubuntu/mydisk/var/nginx-debug-1/sbin/nginx&amp;quot;,
            &amp;quot;args&amp;quot;: [],
            &amp;quot;stopAtEntry&amp;quot;: true,
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
            &amp;quot;environment&amp;quot;: [],
            &amp;quot;externalConsole&amp;quot;: false,
            &amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;,
            &amp;quot;setupCommands&amp;quot;: [
                {
                    &amp;quot;description&amp;quot;: &amp;quot;为 gdb 启用整齐打印&amp;quot;,
                    &amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;,
                    &amp;quot;ignoreFailures&amp;quot;: true
                }
            ]
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;debug worker&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;/home/ubuntu/mydisk/var/nginx-debug-1/sbin/nginx&amp;quot;,
            &amp;quot;processId&amp;quot;: 17094,
            &amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;,
            &amp;quot;setupCommands&amp;quot;: [
                {
                    &amp;quot;description&amp;quot;: &amp;quot;为 gdb 启用整齐打印&amp;quot;,
                    &amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;,
                    &amp;quot;ignoreFailures&amp;quot;: true
                }
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 worker 上调试需要改成 attach 的形式，并且使用了一次 attach 之后，就不能使用 strace -p 17094 查看系统调用了&lt;/p&gt;
&lt;p&gt;然后就可以打断点，进行单步调试了&lt;/p&gt;
&lt;h1 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/51b726b56e2f&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mac上用Visual Studio Code调试Nginx&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gcc-g&quot; tabindex=&quot;-1&quot;&gt;gcc -g 的作用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/gcc-parameter-detail.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GCC 参数详解-runoob&lt;/a&gt;&lt;br /&gt;
在编译的时候会产生调试信息&lt;/p&gt;
&lt;h2 id=&quot;kernel-yama-ptrace-scope&quot; tabindex=&quot;-1&quot;&gt;kernel.yama.ptrace_scope&lt;/h2&gt;
&lt;p&gt;sysctl -a 查看内核参数&lt;br /&gt;
kernel.yama.ptrace_scope&lt;br /&gt;
&lt;a href=&quot;https://www.kernel.org/doc/Documentation/security/Yama.txt&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.kernel.org/doc/Documentation/security/Yama.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sudo vim /etc/sysctl.d/10-ptrace.conf&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yihuajack/article/details/107151801&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VSCode调试出现无法打开glibc库的“raise.c“或“abort.c“等文件的错误&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;sudo-strace&quot; tabindex=&quot;-1&quot;&gt;sudo strace 报 操作不被允许&lt;/h2&gt;
&lt;p&gt;sudo strace -p 17094&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;strace: Could not attach to process. If your uid matches the uid of the target process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try again as the root user. For more details, see /etc/sysctl.d/10-ptrace.conf: Operation not permitted
strace: attach: ptrace(PTRACE_SEIZE, 17094): Operation not permitted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19215177/how-to-solve-ptrace-operation-not-permitted-when-trying-to-attach-gdb-to-a-pro&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/19215177/how-to-solve-ptrace-operation-not-permitted-when-trying-to-attach-gdb-to-a-pro&lt;/a&gt;&lt;br /&gt;
Maybe someone has attached this process with gdb.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ps -ef | grep gdb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;can&#39;t gdb attach the same process twice.&lt;/strong&gt;&lt;br /&gt;
将 vscode 中的 调试关掉，就可以使用 strace 了&lt;br /&gt;
如下图，可以看到，子进程停在了 epoll_pwait 系统调用上了&lt;br /&gt;
&lt;img src=&quot;https://wudanyang6.github.io/img/user/attachs/Pasted%20image%2020210330203413.png&quot; alt=&quot;attachs/Pasted image 20210330203413.png&quot; /&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/c/nginx/vscode 调试nginx代码/" />
        </entry>
        <entry>
            <title>
                nginx 进程模型-整体架构
                
            </title>
            <updated>2024-01-29T06:36:19.477Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/c/nginx/nginx 进程模型-整体架构/</id>
            <content type="html">
                &lt;h1 id=&quot;nginx&quot; tabindex=&quot;-1&quot;&gt;nginx 进程模型-整体架构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://wudanyang6.github.io/img/user/100%20Programmer/c/nginx/713751-20221106220927618-2090658482.png&quot; alt=&quot;713751-20221106220927618-2090658482.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;从网上找了一个非常好的图片，从图中可以看到很多东西&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Nginx&lt;/code&gt; 会生成多个进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker&lt;/code&gt; 使用了 &lt;code&gt;io&lt;/code&gt; 多路复用的事件驱动框架&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker&lt;/code&gt; 内部有很多模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker&lt;/code&gt; 处理磁盘 &lt;code&gt;I/O&lt;/code&gt; 时，使用了标准 &lt;code&gt;I/O&lt;/code&gt; ， &lt;code&gt;sendfile&lt;/code&gt; ， &lt;code&gt;AIO&lt;/code&gt; ，&lt;code&gt;mmap&lt;/code&gt; 等 &lt;code&gt;I/O&lt;/code&gt; 技术&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache loader&lt;/code&gt; 和 &lt;code&gt;Cache manager&lt;/code&gt; 操作 proxy cache&lt;/li&gt;
&lt;li&gt;后端支持多种基于 &lt;code&gt;tcp&lt;/code&gt; 的网络协议&lt;/li&gt;
&lt;/ol&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/c/nginx/nginx 进程模型-整体架构/" />
        </entry>
        <entry>
            <title>
                epoll的边缘触发和水平触发
                
            </title>
            <updated>2024-01-29T03:21:26.675Z</updated>
            <id>https://wudanyang6.github.io//100 Programmer/c/nginx/epoll的边缘触发和水平触发/</id>
            <content type="html">
                &lt;h1 id=&quot;epoll&quot; tabindex=&quot;-1&quot;&gt;epoll的边缘触发和水平触发&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;epoll&lt;/code&gt; 是 Linux 下用于处理大量文件描述符的高效 I/O 多路复用机制。在 &lt;code&gt;epoll&lt;/code&gt; 中，有两种触发模式：水平触发（Level-Triggered，简称 LT）和边缘触发（Edge-Triggered，简称 ET）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;水平触发（LT，Level-Triggered）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当文件描述符就绪时，&lt;code&gt;epoll_wait&lt;/code&gt; 将立即返回。&lt;/li&gt;
&lt;li&gt;如果文件描述符的状态发生变化，&lt;code&gt;epoll_wait&lt;/code&gt; 会再次通知应用程序。&lt;/li&gt;
&lt;li&gt;这种模式下，如果文件描述符有数据可读或可写，&lt;code&gt;epoll_wait&lt;/code&gt; 将不停地返回通知，直到应用程序处理完数据或者阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边缘触发（ET，Edge-Triggered）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当文件描述符就绪时，&lt;code&gt;epoll_wait&lt;/code&gt; 只会通知一次，直到应用程序处理完数据并清空了文件描述符的缓冲区。&lt;/li&gt;
&lt;li&gt;如果文件描述符的状态没有变化，&lt;code&gt;epoll_wait&lt;/code&gt; 不会重复通知应用程序。&lt;/li&gt;
&lt;li&gt;这种模式下，应用程序需要注意，在一个事件通知之后，要一直读或写，直到发生 &lt;code&gt;EAGAIN&lt;/code&gt; 或 &lt;code&gt;EWOULDBLOCK&lt;/code&gt; 错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么epoll这里要叫做边缘触发和水平触发呢？&lt;/p&gt;
&lt;p&gt;这源于通信&lt;strong&gt;数字信号处理领域&lt;/strong&gt;的术语，边缘和水平通常用于描述信号的特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;边缘触发（Edge-Triggered）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&amp;quot;边缘&amp;quot; 指的是信号的变化边缘，即信号从一个状态变为另一个状态的瞬间。&lt;/li&gt;
&lt;li&gt;在数字信号处理中，边缘通常用来表示信号的上升沿或下降沿，即信号从低电平到高电平或从高电平到低电平的瞬间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平触发（Level-Triggered）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&amp;quot;水平&amp;quot; 指的是信号的水平状态，即信号所处的电平状态。&lt;/li&gt;
&lt;li&gt;在数字信号处理中，水平触发通常用来描述信号保持在某个电平的状态，而不关心信号的变化瞬间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://wudanyang6.github.io/img/user/card/92310.png&quot; alt=&quot;92310.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot; tabindex=&quot;-1&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://electronics.stackexchange.com/a/21891&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://electronics.stackexchange.com/a/21891&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://wudanyang6.github.io//100 Programmer/c/nginx/epoll的边缘触发和水平触发/" />
        </entry>
</feed>
